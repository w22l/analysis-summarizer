from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Tuple

import typer
from crewai import Crew, Process
from rich import box
from rich.console import Console
from rich.panel import Panel
from rich.table import Table

from agents import ArticleAnalysisAgents
from article_service import ArticleDownloadError, ArticleService
from config import Settings, load_settings
from storage import AnalysisRecord, ArticleRepository
from tasks import ArticleAnalysisTasks

app = typer.Typer(
    add_completion=False,
    help="Analyze articles and produce structured markdown intelligence reports.",
)
console = Console()


def _build_crew(
    settings: Settings, task_factory: ArticleAnalysisTasks
) -> Tuple[Crew, Dict[str, object]]:
    agents = ArticleAnalysisAgents(settings)

    summarizer_agent = agents.summarizer_agent()
    assumptions_agent = agents.assumptions_agent()
    errors_agent = agents.errors_agent()

    summarize_task = task_factory.summarize_article(summarizer_agent)
    assumptions_task = task_factory.identify_assumptions(assumptions_agent)
    errors_task = task_factory.identify_errors(errors_agent)

    crew = Crew(
        agents=[summarizer_agent, assumptions_agent, errors_agent],
        tasks=[summarize_task, assumptions_task, errors_task],
        process=Process.sequential,
        verbose=settings.verbose,
    )
    return crew, {
        "summary": summarize_task,
        "assumptions": assumptions_task,
        "errors": errors_task,
    }


def _task_output(task: object) -> str:
    for attr in ("output", "result", "raw_output"):
        value = getattr(task, attr, None)
        if value:
            return str(value)
    return ""


def _compose_report(
    *,
    url: str,
    title: Optional[str],
    summary_md: str,
    assumptions_md: str,
    errors_md: str,
    settings: Settings,
) -> str:
    generated_at = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")
    model_name = (
        settings.openrouter_model
        if settings.model_provider == "openrouter"
        else settings.ollama_model
    )

    return "\n".join(
        [
            "# Article Intelligence Report",
            "",
            "## Document Metadata",
            f"- **URL:** {url}",
            f"- **Title:** {title or 'Unknown'}",
            f"- **Generated:** {generated_at}",
            f"- **Model:** {model_name} ({settings.model_provider})",
            "",
            "## Executive Summary",
            summary_md.strip() or "_No summary returned._",
            "",
            "## Authorial Assumptions",
            assumptions_md.strip() or "_No assumptions identified._",
            "",
            "## Potential Errors & Biases",
            errors_md.strip() or "_No potential issues detected._",
            "",
            "> _Report generated by the Article Analysis Agent._",
        ]
    )


def _slugify(value: str) -> str:
    cleaned = "".join(ch.lower() if ch.isalnum() else "-" for ch in value)
    collapsed = "-".join(filter(None, cleaned.split("-")))
    return collapsed or "article"


def _derive_output_path(settings: Settings, title: Optional[str], url: str) -> Path:
    timestamp = datetime.utcnow().strftime("%Y%m%d-%H%M%S")
    base = title or url
    slug = _slugify(base)[:60]
    filename = f"{timestamp}-{slug}.md"
    return settings.output_dir / filename


@app.command()
def analyze(
    url: str = typer.Argument(..., help="Article URL to analyze."),
    output_dir: Optional[Path] = typer.Option(
        None, "--output", "-o", help="Directory where markdown reports will be written."
    ),
    model_provider: Optional[str] = typer.Option(
        None,
        "--model",
        "-m",
        help="Force a provider (openrouter or ollama). Defaults to environment setting.",
    ),
    verbose: bool = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose CrewAI logging.",
    ),
) -> None:
    """Run the full article analysis workflow."""
    settings = load_settings()

    overrides = {
        "model_provider": model_provider.lower() if model_provider else None,
        "output_dir": output_dir.resolve() if output_dir else None,
        "verbose": verbose,
    }
    settings = settings.with_overrides(
        model_provider=overrides["model_provider"],
        output_dir=overrides["output_dir"],
        verbose=overrides["verbose"],
    )

    if settings.model_provider not in {"openrouter", "ollama"}:
        raise typer.BadParameter(
            f"Unsupported model provider '{settings.model_provider}'. "
            "Please choose 'openrouter' or 'ollama'."
        )

    settings.output_dir.mkdir(parents=True, exist_ok=True)

    repository = ArticleRepository(settings.database_path)
    service = ArticleService(repository)

    try:
        article_payload = service.get_article(url)
    except ArticleDownloadError as exc:
        console.print(
            Panel(str(exc), title="Download Error", style="bold red", box=box.ROUNDED)
        )
        raise typer.Exit(code=1)

    console.print(
        Panel(
            "\n".join(
                [
                    f"[bold]Model Provider:[/bold] {settings.model_provider}",
                    f"[bold]Output Directory:[/bold] {settings.output_dir}",
                    f"[bold]Article Cached:[/bold] {article_payload.record.fetched_at.isoformat()}",
                ]
            ),
            title="Analysis Configuration",
            box=box.ROUNDED,
        )
    )

    task_factory = ArticleAnalysisTasks(
        article_body=article_payload.content,
        url=url,
        title=article_payload.title,
    )
    crew, task_map = _build_crew(settings, task_factory)

    crew.kickoff()

    summary_md = _task_output(task_map["summary"])
    assumptions_md = _task_output(task_map["assumptions"])
    errors_md = _task_output(task_map["errors"])

    report = _compose_report(
        url=url,
        title=article_payload.title,
        summary_md=summary_md,
        assumptions_md=assumptions_md,
        errors_md=errors_md,
        settings=settings,
    )

    output_path = _derive_output_path(settings, article_payload.title, url)
    output_path.write_text(report, encoding="utf-8")

    model_name = (
        settings.openrouter_model
        if settings.model_provider == "openrouter"
        else settings.ollama_model
    )
    repository.record_analysis(
        article_id=article_payload.record.id,
        model_provider=settings.model_provider,
        model_name=model_name,
        output_path=output_path,
        created_at=datetime.utcnow(),
    )

    console.print(
        Panel(
            f"Report written to [bold]{output_path}[/bold]",
            title="Analysis Complete",
            style="green",
            box=box.DOUBLE,
        )
    )

    console.print(Panel(report, title="Article Analysis Report", box=box.ROUNDED))


@app.command("show-config")
def show_config() -> None:
    """Display the active configuration."""
    settings = load_settings()
    console.print(
        Panel(
            "\n".join(
                [
                    f"[bold]Model Provider:[/bold] {settings.model_provider}",
                    f"[bold]OpenRouter Model:[/bold] {settings.openrouter_model}",
                    f"[bold]Ollama Model:[/bold] {settings.ollama_model}",
                    f"[bold]Output Directory:[/bold] {settings.output_dir}",
                    f"[bold]Database Path:[/bold] {settings.database_path}",
                ]
            ),
            title="Current Settings",
            box=box.ROUNDED,
        )
    )


@app.command()
def history(
    limit: int = typer.Option(10, help="Maximum number of analysis records to display.")
) -> None:
    """Show recently generated reports."""
    settings = load_settings()
    repository = ArticleRepository(settings.database_path)
    records = repository.list_recent_analyses(limit=limit)

    if not records:
        console.print("No analyses recorded yet.")
        return

    table = Table(
        "ID", "URL", "Title", "Model", "Output Path", "Created At", title="Analysis History"
    )
    for record in records:
        _append_analysis_row(table, record)
    console.print(table)


def _append_analysis_row(table: Table, record: AnalysisRecord) -> None:
    table.add_row(
        str(record.id),
        record.article_url,
        record.article_title or "N/A",
        f"{record.model_name} ({record.model_provider})",
        record.output_path,
        record.created_at.strftime("%Y-%m-%d %H:%M"),
    )


@app.command()
def cache(
    limit: int = typer.Option(10, help="Maximum number of cached articles to display.")
) -> None:
    """List cached articles stored in SQLite."""
    settings = load_settings()
    repository = ArticleRepository(settings.database_path)
    articles = repository.list_cached_articles(limit=limit)

    if not articles:
        console.print("No articles cached yet.")
        return

    table = Table("ID", "URL", "Title", "Fetched At", title="Cached Articles")
    for article in articles:
        table.add_row(
            str(article.id),
            article.url,
            article.title or "N/A",
            article.fetched_at.strftime("%Y-%m-%d %H:%M"),
        )
    console.print(table)


@app.callback(invoke_without_command=True)
def main(ctx: typer.Context) -> None:
    """Entrypoint for the CLI toolkit."""
    if ctx.invoked_subcommand is None:
        typer.echo(ctx.get_help())


if __name__ == "__main__":
    app()
